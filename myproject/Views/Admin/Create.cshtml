@model myproject.Models.Product

@{
    ViewBag.Title = "New Product";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<h1 class="h3 mb-2 text-gray-800">New Product</h1>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-horizontal">
        <div class="py-5">
            <div class="container px-4 px-lg-5 my-5">
                <div class="row gx-4 gx-lg-5 align-items-center">

                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="col-md-10 mb-5">
                                <img id="blah" src="#" alt="your image" style="visibility: hidden; height: 0;padding-left: 5px;" />
                                @Html.EditorFor(model => model.image, new { htmlAttributes = new { @class = "form-control", @type = "file", @accept = "image/*", @onchange = "readURL(this);" } })
                                <input type="hidden" name="imagebase64" id="imagebase64" value="0" />
                                @Html.ValidationMessageFor(model => model.image, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.productname, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.productname, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.productname, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.price, htmlAttributes: new { @class = "control-label col-md-2" })

                            <div class="col-md-10">
                                @Html.EditorFor(model => model.price, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.price, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.description, htmlAttributes: new { @class = "control-label col-md-2" })

                            <div class="col-md-10">
                                @Html.EditorFor(model => model.description, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
                            </div>
                        </div>



                        <div class="form-group">
                            @Html.LabelFor(model => model.category, htmlAttributes: new { @class = "control-label col-md-2" })

                            <div class="col-md-10">
                                @Html.EnumDropDownListFor(model => model.category, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.category, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.clade_hashtag, htmlAttributes: new { @class = "control-label col-md-2" })

                            <div class="col-md-10">
                                @Html.EditorFor(model => model.clade_hashtag, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.clade_hashtag, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.family_hasttag, htmlAttributes: new { @class = "control-label col-md-2" })

                            <div class="col-md-10">
                                @Html.EditorFor(model => model.family_hasttag, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.family_hasttag, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.difficulty_hashtag, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.difficulty_hashtag, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.difficulty_hashtag, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="d-flex">
                            <button class="btn btn-outline-dark flex-shrink-0 mx-auto" type="submit">
                                <i class="bi-cart-fill me-1"></i>
                                Create
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}



<script>
    function readURL(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#blah')
                    .attr('src', e.target.result)
                    .width(400)
                    .height(300);
                document.getElementById("blah").style.visibility = "visible";
                document.getElementById("imagebase64").value = e.target.result;
            };
            reader.readAsDataURL(input.files[0]);
        }
    }
</script>