@model myproject.Models.Product

@{
    ViewBag.Title = "ProductEdit";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<h1 class="h3 mb-2 text-gray-800">Product Edit</h1>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-horizontal">
        <div class="py-5">
            <div class="container px-4 px-lg-5 my-5">
                <div class="row gx-4 gx-lg-5 align-items-center">
                    @Html.HiddenFor(model => model.productID)
                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="col-md-10 mb-5">
                                <img class="card-img-top mb-5 mb-md-0" src="@Model.image" />
                                @Html.EditorFor(model => model.image, new { htmlAttributes = new { @class = "form-control", @type = "file", @accept = "image/*", @onchange = "readURL(this);" } })
                                <input type="hidden" name="imagebase64" id="imagebase64" value="0" />
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="col-md-10 mb-5">
                                @Html.EditorFor(model => model.productname, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.productname, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-10 mb-5">
                                @Html.EditorFor(model => model.price, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.price, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-10 mb-5">
                                @Html.EditorFor(model => model.description, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
                            </div>
                        </div>



                        <div class="form-group">
                            <div class="col-md-10 mb-5">
                                @Html.EnumDropDownListFor(model => model.category, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.category, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-10 mb-5">
                                @Html.EditorFor(model => model.clade_hashtag, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.clade_hashtag, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-10 mb-5">
                                @Html.EditorFor(model => model.family_hasttag, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.family_hasttag, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-10 mb-5">
                                @Html.EditorFor(model => model.difficulty_hashtag, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.difficulty_hashtag, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="d-flex">
                            <button class="btn btn-outline-dark flex-shrink-0 mx-lg-5 mx-3" type="submit">
                                <i class="bi-cart-fill me-1"></i>
                                Save changes
                            </button>
                            <button class="btn btn-outline-dark flex-shrink-0 mx-lg-5" type="button" data-toggle="modal" data-target="#deletetModal">
                                <i class="bi-cart-fill me-1"></i>
                                Delete this
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Modal-->
<div class="modal fade" id="deletetModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Delete this product?</h5>
                <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">Select "Delete" below if you want to delete this.</div>
            <div class="modal-footer">
                <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancel</button>
                @using (Html.BeginForm("Delete", "Admin", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    <button class="btn btn-primary" type="submit">Delete</button>
                    <input type="hidden" name="id" value="@Model.productID" />
                }
            </div>
        </div>
    </div>
</div>

<script>
    function readURL(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                document.getElementById("imagebase64").value = e.target.result;
                console.log(document.getElementById("imagebase64").value);
            };
            reader.readAsDataURL(input.files[0]);
        }
    }
</script>